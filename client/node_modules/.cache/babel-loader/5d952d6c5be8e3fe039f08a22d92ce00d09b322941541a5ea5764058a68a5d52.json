{"ast":null,"code":"const connectWebSocket = (chatId, username) => {\n  return new Promise((resolve, reject) => {\n    const ws = new WebSocket(`ws://localhost:8071/ws?chat_id=${chatId}`);\n    ws.onopen = () => {\n      console.log(\"WebSocket connection established.\");\n      const bootupMessage = JSON.stringify({\n        type: \"BOOTUP\",\n        chat_id: chatId,\n        username: username,\n        timestamp: new Date().toISOString()\n      });\n      ws.send(bootupMessage);\n      console.log(\"BOOTUP message sent.\");\n      resolve(ws);\n    };\n    ws.onerror = error => {\n      console.error(\"WebSocket error:\", error);\n      reject(error);\n    };\n    ws.onclose = () => {\n      console.log(\"WebSocket connection closed.\");\n    };\n    ws.onmessage = event => {\n      console.log(\"Message from server:\", event.data);\n    };\n  });\n};\nexport { connectWebSocket };","map":{"version":3,"names":["connectWebSocket","chatId","username","Promise","resolve","reject","ws","WebSocket","onopen","console","log","bootupMessage","JSON","stringify","type","chat_id","timestamp","Date","toISOString","send","onerror","error","onclose","onmessage","event","data"],"sources":["/Users/shreeyashnaik/Desktop/Zeta/go-socket-pg/client/src/utils/websocket.js"],"sourcesContent":["const connectWebSocket = (chatId, username) => {\n    return new Promise((resolve, reject) => {\n        const ws = new WebSocket(`ws://localhost:8071/ws?chat_id=${chatId}`);\n    \n        ws.onopen = () => {\n            console.log(\"WebSocket connection established.\");\n            const bootupMessage = JSON.stringify({\n                type: \"BOOTUP\",\n                chat_id: chatId,\n                username: username,\n                timestamp: new Date().toISOString(),\n            });\n            ws.send(bootupMessage);\n            console.log(\"BOOTUP message sent.\");\n            resolve(ws);\n        };\n    \n        ws.onerror = (error) => {\n            console.error(\"WebSocket error:\", error);\n            reject(error);\n        };\n    \n        ws.onclose = () => {\n            console.log(\"WebSocket connection closed.\");\n        };\n    \n        ws.onmessage = (event) => {\n            console.log(\"Message from server:\", event.data);\n        };\n    });\n};\n\nexport { connectWebSocket };"],"mappings":"AAAA,MAAMA,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,QAAQ,KAAK;EAC3C,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMC,EAAE,GAAG,IAAIC,SAAS,CAAC,kCAAkCN,MAAM,EAAE,CAAC;IAEpEK,EAAE,CAACE,MAAM,GAAG,MAAM;MACdC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;MAChD,MAAMC,aAAa,GAAGC,IAAI,CAACC,SAAS,CAAC;QACjCC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAEd,MAAM;QACfC,QAAQ,EAAEA,QAAQ;QAClBc,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;MACtC,CAAC,CAAC;MACFZ,EAAE,CAACa,IAAI,CAACR,aAAa,CAAC;MACtBF,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACnCN,OAAO,CAACE,EAAE,CAAC;IACf,CAAC;IAEDA,EAAE,CAACc,OAAO,GAAIC,KAAK,IAAK;MACpBZ,OAAO,CAACY,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxChB,MAAM,CAACgB,KAAK,CAAC;IACjB,CAAC;IAEDf,EAAE,CAACgB,OAAO,GAAG,MAAM;MACfb,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC/C,CAAC;IAEDJ,EAAE,CAACiB,SAAS,GAAIC,KAAK,IAAK;MACtBf,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEc,KAAK,CAACC,IAAI,CAAC;IACnD,CAAC;EACL,CAAC,CAAC;AACN,CAAC;AAED,SAASzB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}